<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
	http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">

	<!-- front controller (facade pattern) -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring-config/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<multipart-config />
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- filter for character encoding -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- filter for osiv -->
	<!-- <filter> <filter-name>osiv</filter-name> <filter-class></filter-class> 
		</filter> <filter-mapping> <filter-name></filter-name> <url-pattern></url-pattern> 
		</filter-mapping> -->


	<!-- Open Session In View -->
	<!-- 如果Hibernate关联映射使用了延迟加载 -->
	<!-- 延迟加载和会话关闭之间的矛盾如何解决? -->
	<!-- no session / session closed -->
	<!-- 1. 关闭延迟加载特性(不推荐) -->
	<!-- 2. 延长Session的生命周期 - 配置OpenSessionInViewFilter -->
	<!-- 访问量不大的应用可以考虑此种方法 - 最简单 - 反模式 -->
	<!-- 3. 直接在业务层把延迟加载的对象拿到 -->
	<!-- 做法1: Hibernate.isInitialized(a.b); Hibernate.initialize(a.b); -->
	<!-- 做法2: 组装DTO / VO - 让虚拟代理发出SQL语句取到真实值 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring-config/spring-app*.xml</param-value>
	</context-param>

	<!-- listener for creating Spring IoC container -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

</web-app>